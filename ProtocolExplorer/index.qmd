---
title: "ProtocolExplorer"
jupyter: python3
engine: shiny
filters:
  - shinylive
---



```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 800

from shiny import App, Inputs, Outputs, Session, render, ui
from shiny import reactive

import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import sympy as sp

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.sidebar(
    ui.input_slider(id="R_1",label="Rad. 1 (c.d.)",min=4,max=40,value=4,step=1),
    ui.input_slider(id="R_2",label=" Rad. 2 (c.d.)",min=4.0,max=40.0,value=10.0,step=0.01),
    ui.input_slider(id="k",label="Uptake rate",min=1.0,max=10.0,value=5.0,step=0.01), 
    ui.input_slider(id="d",label="Release rate",min=0.0,max=0.1,value=0.01,step=0.001), 
    ui.input_slider(id="D",label="Diff. co.",min=5.0,max=100.0,value=30.0,step=1),
    ui.input_slider(id="t_1",label="Treat. on dur. (d)",min=0.0,max=6.0,value=1.0,step=1),
    ui.input_slider(id="t_2",label="Treat. off dur. (d)",min=0.0,max=28.0,value=6.0,step=1),
    ui.input_slider(id="bound_conc",label="Treatment conc",min=0.01,max=0.4,value=0.05,step=0.01),
        ),
ui.output_plot("plot"),
    ),
)

def server(input, output, session):
    @render.plot
    def plot():
        fig, ax = plt.subplots(2,1)
        
        
        fudge_factor=4.0
        R_1=int(input.R_1())
        R_2=float(input.R_2())
        uptake_rate=float(input.k())*24.0
        deg_rate=float(input.d())*24.0
        D=float(input.D())*24.0*fudge_factor
        t_1=float(input.t_1())
        t_2=float(input.t_2())+t_1
        bound_conc=float(input.bound_conc())

        t_samp1=np.linspace(0,t_1,1000)
        t_samp2=np.linspace(t_1,t_2,1000)


        x_hmm=np.exp(-(t_2-t_1)*deg_rate)

        C=uptake_rate*bound_conc*t_1*x_hmm/(1-x_hmm)
        sol_1=C+bound_conc*uptake_rate*t_samp1
        sol_2=(C+bound_conc*uptake_rate*t_1)*np.exp(-deg_rate*(t_samp2-t_1))

        


        

        #envelope_factor=np.exp(-np.sqrt(self.uptake_rate/self.D)*x)

        A_max=C+bound_conc*uptake_rate*t_1
        A_av= 1/t_2*(C*t_1+0.5*bound_conc*uptake_rate*t_1**2+(C+bound_conc*uptake_rate*t_1)/deg_rate*(1-np.exp(-deg_rate*(t_2-t_1))))

        A_min=C

        
        L_plot=np.max([R_1,R_2])
        x_1=np.linspace(0,L_plot,100)
        envelope_factor_radius=np.exp(-np.sqrt(uptake_rate/D)*(L_plot-x_1))
        envelope_upper_radius=A_av+envelope_factor_radius*(A_max-A_av)
        envelope_lower_radius=A_av-envelope_factor_radius*(A_av-A_min)

        
        envelope_factor_1=np.exp(-np.sqrt(uptake_rate/D)*(R_1))

        envelope_upper_1=A_av+envelope_factor_1*(A_max-A_av)
        envelope_lower_1=A_av-envelope_factor_1*(A_av-A_min)

        envelope_factor_2=np.exp(-np.sqrt(uptake_rate/D)*(R_2))
        envelope_upper_2=A_av+envelope_factor_2*(A_max-A_av)
        envelope_lower_2=A_av-envelope_factor_2*(A_av-A_min)

        envelope_factor_per=np.exp(-np.sqrt(uptake_rate/D)*(0))
        envelope_upper_per=A_av+envelope_factor_per*(A_max-A_av)
        envelope_lower_per=A_av-envelope_factor_per*(A_av-A_min)

        sol1_mod_1=(sol_1-A_av)*envelope_factor_1+A_av
        
        sol2_mod_1=(sol_2-A_av)*envelope_factor_1+A_av

        sol1_mod_2=(sol_1-A_av)*envelope_factor_2+A_av
        
        sol2_mod_2=(sol_2-A_av)*envelope_factor_2+A_av


        num_cycles_plot=2
        fig,ax=plt.subplots(2,2,figsize=(4,4))

        for i in range(num_cycles_plot):
            ax[0,0].plot(t_samp1+ i*(t_1+t_2) ,bound_conc*np.ones_like(t_samp1),'b',t_samp2+ i*(t_1+t_2) ,np.zeros_like(t_samp2),'b')
        for i in range(num_cycles_plot):
            ax[0,1].plot(t_samp1+ i*(t_1+t_2) ,sol_1,'b',t_samp2+ i*(t_1+t_2) ,sol_2,'b')
        for i in range(num_cycles_plot):
            ax[1,0].plot(t_samp1+ i*(t_1+t_2) ,sol1_mod_1,'r--',t_samp2+ i*(t_1+t_2) ,sol2_mod_1,'r--')   
        for i in range(num_cycles_plot):
            ax[1,0].plot(t_samp1+ i*(t_1+t_2) ,sol1_mod_2,'k--',t_samp2+ i*(t_1+t_2) ,sol2_mod_2,'k--') 

        ax[1,1].plot(x_1,envelope_upper_radius,x_1,envelope_lower_radius)
        ax[1,1].plot([L_plot-R_1,L_plot-R_1],[0, np.max(envelope_upper_radius)],'r--')
        ax[1,1].plot([L_plot-R_2,L_plot-R_2],[0, np.max(envelope_upper_radius)],'k--')

        ax[0,0].set_title('Treatment protocol')  
        ax[0,1].set_title('Conc. bound periphery')
        ax[1,0].set_ylabel('Conc. bound centre')
        ax[1,0].set_title('Sph. 1 (red) v Sph. 2 (black)') 
        ax[1,1].set_title('Envelope')  
        ax[1,1].set_ylabel('Bound conc')  
        ax[0,0].set_xlabel('Time (d)')
        ax[0,1].set_xlabel('Time (d)')
        ax[1,0].set_xlabel('Time (d)')
        ax[1,1].set_xlabel('Radius (c.d.)')
        ax[0,0].set_ylabel('Conc')
        ax[0,1].set_ylabel('Conc')


        
        fig.tight_layout()
        plt.show()
    
app = App(app_ui, server)
```
:::
