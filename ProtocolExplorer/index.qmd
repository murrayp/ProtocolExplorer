---
title: "ProtocolExplorer"
jupyter: python3
engine: shiny
filters:
  - shinylive
---



```{shinylive-python}
#| standalone: true
#| components: [viewer]
#| viewerHeight: 800

from shiny import App, Inputs, Outputs, Session, render, ui
from shiny import reactive

import numpy as np
from pathlib import Path
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import sympy as sp
from scipy.special import iv


def ComputeEnvelope(radial_coordinate,R,diff_length_min_1,time_av_bc_u,modified_bc_t_1,modified_bc_t_2):
    #diff_length_min_1=np.sqrt(self.uptake_rate/self.D)
    #time_av_bc_u= self.t_1/(self.t_1+self.t_2)*self.bound_conc
    #modified_bc_t_1=self.bound_conc-time_av_bc_u
    #modified_bc_t_2=0.0-time_av_bc_u


    envelope= iv(0,diff_length_min_1*radial_coordinate)/iv(0,diff_length_min_1*R)

    envelope_t1=envelope*modified_bc_t_1+time_av_bc_u
    envelope_t2=envelope*modified_bc_t_2+time_av_bc_u
    
    return envelope_t1,envelope_t2

def ComputePeriodicConditiononC(beta_1,beta_2,d,t_1,t_2):

        
        num=beta_2/d+((beta_1-beta_2)/d-beta_1/d*np.exp(-d*t_1))*np.exp(-d*(t_2-t_1))
        denom= 1-np.exp(-d*t_2)

        C=num/denom
        
        return C
def ComputeTimeSeries(radial_coordinate,R,t_1,t_2,uptake_rate,deg_rate,D,bound_conc,t_samp1,t_samp2):

    diff_length_min_1=np.sqrt(uptake_rate/D)
    time_av_bc_u= t_1/(t_1+t_2)*bound_conc
    modified_bc_t_1=bound_conc-time_av_bc_u
    modified_bc_t_2=0.0-time_av_bc_u
    
    envelope_t_1,envelope_t_2=ComputeEnvelope(radial_coordinate,R,diff_length_min_1,time_av_bc_u,modified_bc_t_1,modified_bc_t_2)

    beta_1=uptake_rate*envelope_t_1
    beta_2=uptake_rate*envelope_t_2

    C=ComputePeriodicConditiononC(beta_1,beta_2,deg_rate,t_1,t_2)

    sol_1=   beta_1/deg_rate+(C-beta_1/deg_rate)*np.exp(-deg_rate*t_samp1) 
    factor=(beta_1-beta_2)/deg_rate + (C-beta_1/deg_rate)*np.exp(-deg_rate*t_1)
    sol_2=   beta_2/deg_rate+factor*np.exp(-deg_rate*(t_samp2-t_1))
    return sol_1, sol_2

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.sidebar(
    ui.input_slider(id="R_1",label="Rad. 1 (c.d.)",min=1,max=20,value=4,step=0.1),
    ui.input_slider(id="R_2",label=" Rad. 2 (c.d.)",min=1.0,max=40.0,value=10.0,step=0.1),
    ui.input_slider(id="k",label="Uptake rate",min=0.1,max=10.0,value=5.0,step=0.1), 
    ui.input_slider(id="d",label="Release rate",min=0.0,max=0.1,value=0.01,step=0.001), 
    ui.input_slider(id="D",label="Diff. co.",min=1.0,max=100.0,value=30.0,step=1),
    ui.input_slider(id="t_1",label="Treat. on dur. (d)",min=0.0,max=6.0,value=1.0,step=1),
    ui.input_slider(id="t_2",label="Treat. off dur. (d)",min=0.0,max=28.0,value=6.0,step=1),
    ui.input_slider(id="bound_conc",label="Treatment conc",min=0.01,max=0.4,value=0.05,step=0.01),
        ),
ui.output_plot("plot"),
    ),
)

def server(input, output, session):
    @render.plot
    def plot():
        fig, ax = plt.subplots(2,1)
        
        
        fudge_factor=4.0
        R_1=int(input.R_1())
        R_2=float(input.R_2())
        uptake_rate=float(input.k())*24.0
        deg_rate=float(input.d())*24.0
        D=float(input.D())*24.0*fudge_factor
        t_1=float(input.t_1())
        t_2=float(input.t_2())+t_1
        bound_conc=float(input.bound_conc())

        t_samp1=np.linspace(0,t_1,1000)
        t_samp2=np.linspace(t_1,t_2,1000)

        
        radial_coordinate=R_1
        sol_1,sol_2=ComputeTimeSeries(radial_coordinate,R_1,t_1,t_2,uptake_rate,deg_rate,D,bound_conc,t_samp1,t_samp2)


        sol1_mod_1,sol2_mod_1=ComputeTimeSeries(0.0,R_1,t_1,t_2,uptake_rate,deg_rate,D,bound_conc,t_samp1,t_samp2)

        sol1_mod_2,sol2_mod_2=ComputeTimeSeries(0.0,R_2,t_1,t_2,uptake_rate,deg_rate,D,bound_conc,t_samp1,t_samp2)

        max_R=np.max([R_1,R_2])

        r=np.linspace(0.0,max_R,100)
        diff_length_min_1=np.sqrt(uptake_rate/D)
        time_av_bc_u= t_1/(t_1+t_2)*bound_conc
        modified_bc_t_1=bound_conc-time_av_bc_u
        modified_bc_t_2=0.0-time_av_bc_u

        envelope_upper_radius,envelope_lower_radius=ComputeEnvelope(r,max_R,diff_length_min_1,time_av_bc_u,modified_bc_t_1,modified_bc_t_2)
        
        num_cycles_plot=2
        fig,ax=plt.subplots(2,2,figsize=(4,4))

        for i in range(num_cycles_plot):
            ax[0,0].plot(t_samp1+ i*(t_1+t_2) ,bound_conc*np.ones_like(t_samp1),'b',t_samp2+ i*(t_1+t_2) ,np.zeros_like(t_samp2),'b')
        for i in range(num_cycles_plot):
            ax[0,1].plot(t_samp1+ i*(t_1+t_2) ,sol_1,'b',t_samp2+ i*(t_1+t_2) ,sol_2,'b')
        for i in range(num_cycles_plot):
            ax[1,0].plot(t_samp1+ i*(t_1+t_2) ,sol1_mod_1,'r--',t_samp2+ i*(t_1+t_2) ,sol2_mod_1,'r--')   
        for i in range(num_cycles_plot):
            ax[1,0].plot(t_samp1+ i*(t_1+t_2) ,sol1_mod_2,'k--',t_samp2+ i*(t_1+t_2) ,sol2_mod_2,'k--') 

        ax[1,1].plot(r,envelope_upper_radius,r,envelope_lower_radius)
        ax[1,1].plot([max_R-R_1,max_R-R_1],[0, np.max(envelope_upper_radius)],'r--')
        ax[1,1].plot([max_R-R_2,max_R-R_2],[0, np.max(envelope_upper_radius)],'k--')

        ax[0,0].set_title('Treatment protocol')  
        ax[0,1].set_title('Conc. bound periphery')
        ax[1,0].set_ylabel('Conc. bound centre')
        ax[1,0].set_title('Sph. 1 (red) v Sph. 2 (black)') 
        ax[1,1].set_title('Envelope')  
        ax[1,1].set_ylabel('Bound conc')  
        ax[0,0].set_xlabel('Time (d)')
        ax[0,1].set_xlabel('Time (d)')
        ax[1,0].set_xlabel('Time (d)')
        ax[1,1].set_xlabel('Radius (c.d.)')
        ax[0,0].set_ylabel('Conc')
        ax[0,1].set_ylabel('Conc')


        
        fig.tight_layout()
        plt.show()
    
app = App(app_ui, server)
```
:::
