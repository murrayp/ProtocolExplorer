[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ProtocolExplorer",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 800\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\nimport sympy as sp\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n    ui.input_slider(id=\"R_1\",label=\"Rad. 1 (c.d.)\",min=1,max=20,value=4,step=0.1),\n    ui.input_slider(id=\"R_2\",label=\" Rad. 2 (c.d.)\",min=1.0,max=40.0,value=10.0,step=0.1),\n    ui.input_slider(id=\"k\",label=\"Uptake rate\",min=0.1,max=10.0,value=5.0,step=0.1), \n    ui.input_slider(id=\"d\",label=\"Release rate\",min=0.0,max=0.1,value=0.01,step=0.001), \n    ui.input_slider(id=\"D\",label=\"Diff. co.\",min=1.0,max=100.0,value=30.0,step=1),\n    ui.input_slider(id=\"t_1\",label=\"Treat. on dur. (d)\",min=0.0,max=6.0,value=1.0,step=1),\n    ui.input_slider(id=\"t_2\",label=\"Treat. off dur. (d)\",min=0.0,max=28.0,value=6.0,step=1),\n    ui.input_slider(id=\"bound_conc\",label=\"Treatment conc\",min=0.01,max=0.4,value=0.05,step=0.01),\n        ),\nui.output_plot(\"plot\"),\n    ),\n)\n\ndef server(input, output, session):\n    @render.plot\n    def plot():\n        fig, ax = plt.subplots(2,1)\n        \n        \n        fudge_factor=4.0\n        R_1=int(input.R_1())\n        R_2=float(input.R_2())\n        uptake_rate=float(input.k())*24.0\n        deg_rate=float(input.d())*24.0\n        D=float(input.D())*24.0*fudge_factor\n        t_1=float(input.t_1())\n        t_2=float(input.t_2())+t_1\n        bound_conc=float(input.bound_conc())\n\n        t_samp1=np.linspace(0,t_1,1000)\n        t_samp2=np.linspace(t_1,t_2,1000)\n\n\n        x_hmm=np.exp(-(t_2-t_1)*deg_rate)\n\n        C=uptake_rate*bound_conc*t_1*x_hmm/(1-x_hmm)\n        sol_1=C+bound_conc*uptake_rate*t_samp1\n        sol_2=(C+bound_conc*uptake_rate*t_1)*np.exp(-deg_rate*(t_samp2-t_1))\n\n        \n\n\n        \n\n        #envelope_factor=np.exp(-np.sqrt(self.uptake_rate/self.D)*x)\n\n        A_max=C+bound_conc*uptake_rate*t_1\n        A_av= 1/t_2*(C*t_1+0.5*bound_conc*uptake_rate*t_1**2+(C+bound_conc*uptake_rate*t_1)/deg_rate*(1-np.exp(-deg_rate*(t_2-t_1))))\n\n        A_min=C\n\n        \n        L_plot=np.max([R_1,R_2])\n        x_1=np.linspace(0,L_plot,100)\n        envelope_factor_radius=np.exp(-np.sqrt(uptake_rate/D)*(L_plot-x_1))\n        envelope_upper_radius=A_av+envelope_factor_radius*(A_max-A_av)\n        envelope_lower_radius=A_av-envelope_factor_radius*(A_av-A_min)\n\n        \n        envelope_factor_1=np.exp(-np.sqrt(uptake_rate/D)*(R_1))\n\n        envelope_upper_1=A_av+envelope_factor_1*(A_max-A_av)\n        envelope_lower_1=A_av-envelope_factor_1*(A_av-A_min)\n\n        envelope_factor_2=np.exp(-np.sqrt(uptake_rate/D)*(R_2))\n        envelope_upper_2=A_av+envelope_factor_2*(A_max-A_av)\n        envelope_lower_2=A_av-envelope_factor_2*(A_av-A_min)\n\n        envelope_factor_per=np.exp(-np.sqrt(uptake_rate/D)*(0))\n        envelope_upper_per=A_av+envelope_factor_per*(A_max-A_av)\n        envelope_lower_per=A_av-envelope_factor_per*(A_av-A_min)\n\n        sol1_mod_1=(sol_1-A_av)*envelope_factor_1+A_av\n        \n        sol2_mod_1=(sol_2-A_av)*envelope_factor_1+A_av\n\n        sol1_mod_2=(sol_1-A_av)*envelope_factor_2+A_av\n        \n        sol2_mod_2=(sol_2-A_av)*envelope_factor_2+A_av\n\n\n        num_cycles_plot=2\n        fig,ax=plt.subplots(2,2,figsize=(4,4))\n\n        for i in range(num_cycles_plot):\n            ax[0,0].plot(t_samp1+ i*(t_1+t_2) ,bound_conc*np.ones_like(t_samp1),'b',t_samp2+ i*(t_1+t_2) ,np.zeros_like(t_samp2),'b')\n        for i in range(num_cycles_plot):\n            ax[0,1].plot(t_samp1+ i*(t_1+t_2) ,sol_1,'b',t_samp2+ i*(t_1+t_2) ,sol_2,'b')\n        for i in range(num_cycles_plot):\n            ax[1,0].plot(t_samp1+ i*(t_1+t_2) ,sol1_mod_1,'r--',t_samp2+ i*(t_1+t_2) ,sol2_mod_1,'r--')   \n        for i in range(num_cycles_plot):\n            ax[1,0].plot(t_samp1+ i*(t_1+t_2) ,sol1_mod_2,'k--',t_samp2+ i*(t_1+t_2) ,sol2_mod_2,'k--') \n\n        ax[1,1].plot(x_1,envelope_upper_radius,x_1,envelope_lower_radius)\n        ax[1,1].plot([L_plot-R_1,L_plot-R_1],[0, np.max(envelope_upper_radius)],'r--')\n        ax[1,1].plot([L_plot-R_2,L_plot-R_2],[0, np.max(envelope_upper_radius)],'k--')\n\n        ax[0,0].set_title('Treatment protocol')  \n        ax[0,1].set_title('Conc. bound periphery')\n        ax[1,0].set_ylabel('Conc. bound centre')\n        ax[1,0].set_title('Sph. 1 (red) v Sph. 2 (black)') \n        ax[1,1].set_title('Envelope')  \n        ax[1,1].set_ylabel('Bound conc')  \n        ax[0,0].set_xlabel('Time (d)')\n        ax[0,1].set_xlabel('Time (d)')\n        ax[1,0].set_xlabel('Time (d)')\n        ax[1,1].set_xlabel('Radius (c.d.)')\n        ax[0,0].set_ylabel('Conc')\n        ax[0,1].set_ylabel('Conc')\n\n\n        \n        fig.tight_layout()\n        plt.show()\n    \napp = App(app_ui, server)\n:::"
  }
]